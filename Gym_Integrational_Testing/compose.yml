services:
  gym-trainer-workload:
    image: gym-trainer-workload
    ports:
      - "8080:8080"
    build:
      context: .
      dockerfile: WorkloadDockerfile
    env_file:
      - .env
    environment:
      - JAVA_OPTS="-Djavax.net.ssl.keyStore=/app/resources/myCertificate.jks -Djavax.net.ssl.keyStorePassword=${KEY_STORE_PASSWORD} -Djavax.net.ssl.trustStore=/app/resources/myCertificate.jks -Djavax.net.ssl.trustStorePassword=${TRUST_STORE_PASSWORD}"
    networks:
      gym-network:
        ipv4_address: 172.18.0.6
    depends_on:
      mongodb:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    volumes:
      - ./src/main/resources/myCertificate.jks:/app/resources/myCertificate.jks

  mongodb:
    image: mongo:latest
    env_file:
      - .env
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_DB_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_DB_PASSWORD}
    ports:
      - "27017:27017"
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 10s
    networks:
      gym-network:
        ipv4_address: 172.18.0.7
    volumes:
      - mongo_data:/data/db

  postgres:
    image: postgres:latest
    env_file:
      - .env
    ports:
      - "5432:5432"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}" ]
      interval: 30s
      timeout: 60s
      retries: 5
      start_period: 80s
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      gym-network:
        ipv4_address: 172.18.0.2
    mem_limit: 1g

  prometheus:
    image: prom/prometheus:latest
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    networks:
      gym-network:
        ipv4_address: 172.18.0.3
    mem_limit: 1g

  spring-boot-gym:
    image: spring-gym
    env_file:
      - .env
    environment:
      - JAVA_OPTS="-Djavax.net.ssl.keyStore=/app/resources/myCertificate.jks -Djavax.net.ssl.keyStorePassword=${KEY_STORE_PASSWORD} -Djavax.net.ssl.trustStore=/app/resources/myCertificate.jks -Djavax.net.ssl.trustStorePassword=${TRUST_STORE_PASSWORD}"
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres-db:5432/${POSTGRES_DB}
      - SPRING_DATASOURCE_USERNAME=${POSTGRES_USER}
      - SPRING_DATASOURCE_PASSWORD=${POSTGRES_PASSWORD}
      - SPRING_PROFILES_ACTIVE=prod
    ports:
      - "8443:8443"
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    build:
      context: .
      dockerfile: CoreGymDockerfile
    volumes:
      - ./src/main/resources/myCertificate.jks:/app/resources/myCertificate.jks
    networks:
      gym-network:
        ipv4_address: 172.18.0.5
    healthcheck:
      test: [ "CMD-SHELL", "curl -f https://localhost:8443/actuator/health || exit 1" ]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 10s
    mem_limit: 1g

  rabbitmq:
    image: rabbitmq:3-management
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD}
    networks:
      gym-network:
        ipv4_address: 172.18.0.10
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 10s
    mem_limit: 1g

volumes:
  postgres_data:
  mongo_data:

networks:
  gym-network:
    external: true
